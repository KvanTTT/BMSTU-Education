#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cinema
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Cinema")]
	public partial class CinemaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblCountry(tblCountry instance);
    partial void UpdatetblCountry(tblCountry instance);
    partial void DeletetblCountry(tblCountry instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InserttblGenre(tblGenre instance);
    partial void UpdatetblGenre(tblGenre instance);
    partial void DeletetblGenre(tblGenre instance);
    partial void InserttblMovie(tblMovie instance);
    partial void UpdatetblMovie(tblMovie instance);
    partial void DeletetblMovie(tblMovie instance);
    partial void InserttblMovieCountry(tblMovieCountry instance);
    partial void UpdatetblMovieCountry(tblMovieCountry instance);
    partial void DeletetblMovieCountry(tblMovieCountry instance);
    partial void InserttblMovieGenre(tblMovieGenre instance);
    partial void UpdatetblMovieGenre(tblMovieGenre instance);
    partial void DeletetblMovieGenre(tblMovieGenre instance);
    partial void InserttblPrice(tblPrice instance);
    partial void UpdatetblPrice(tblPrice instance);
    partial void DeletetblPrice(tblPrice instance);
    partial void InserttblRoom(tblRoom instance);
    partial void UpdatetblRoom(tblRoom instance);
    partial void DeletetblRoom(tblRoom instance);
    partial void InserttblSeat(tblSeat instance);
    partial void UpdatetblSeat(tblSeat instance);
    partial void DeletetblSeat(tblSeat instance);
    partial void InserttblSoldTicket(tblSoldTicket instance);
    partial void UpdatetblSoldTicket(tblSoldTicket instance);
    partial void DeletetblSoldTicket(tblSoldTicket instance);
    partial void InserttblTicket(tblTicket instance);
    partial void UpdatetblTicket(tblTicket instance);
    partial void DeletetblTicket(tblTicket instance);
    partial void InserttblShow(tblShow instance);
    partial void UpdatetblShow(tblShow instance);
    partial void DeletetblShow(tblShow instance);
    #endregion
		
		public CinemaDataContext() : 
				base(global::Cinema.Properties.Settings.Default.CinemaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblCountry> tblCountries
		{
			get
			{
				return this.GetTable<tblCountry>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<tblGenre> tblGenres
		{
			get
			{
				return this.GetTable<tblGenre>();
			}
		}
		
		public System.Data.Linq.Table<tblMovie> tblMovies
		{
			get
			{
				return this.GetTable<tblMovie>();
			}
		}
		
		public System.Data.Linq.Table<tblMovieCountry> tblMovieCountries
		{
			get
			{
				return this.GetTable<tblMovieCountry>();
			}
		}
		
		public System.Data.Linq.Table<tblMovieGenre> tblMovieGenres
		{
			get
			{
				return this.GetTable<tblMovieGenre>();
			}
		}
		
		public System.Data.Linq.Table<tblPrice> tblPrices
		{
			get
			{
				return this.GetTable<tblPrice>();
			}
		}
		
		public System.Data.Linq.Table<tblRoom> tblRooms
		{
			get
			{
				return this.GetTable<tblRoom>();
			}
		}
		
		public System.Data.Linq.Table<tblSeat> tblSeats
		{
			get
			{
				return this.GetTable<tblSeat>();
			}
		}
		
		public System.Data.Linq.Table<tblSoldTicket> tblSoldTickets
		{
			get
			{
				return this.GetTable<tblSoldTicket>();
			}
		}
		
		public System.Data.Linq.Table<tblTicket> tblTickets
		{
			get
			{
				return this.GetTable<tblTicket>();
			}
		}
		
		public System.Data.Linq.Table<ShowFilmsAfterCurrentTime> ShowFilmsAfterCurrentTimes
		{
			get
			{
				return this.GetTable<ShowFilmsAfterCurrentTime>();
			}
		}
		
		public System.Data.Linq.Table<tblShow> tblShows
		{
			get
			{
				return this.GetTable<tblShow>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MintoTime", IsComposable=true)]
		public System.Nullable<System.DateTime> MintoTime([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Min", DbType="Int")] System.Nullable<int> min)
		{
			return ((System.Nullable<System.DateTime>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), min).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ConcatGenres", IsComposable=true)]
		public string ConcatGenres([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MovieID", DbType="Int")] System.Nullable<int> movieID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), movieID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CountCashM", IsComposable=true)]
		public System.Nullable<int> CountCashM([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MovieID", DbType="Int")] System.Nullable<int> movieID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), movieID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CountCashPeriod", IsComposable=true)]
		public System.Nullable<int> CountCashPeriod([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Datefrom", DbType="DateTime")] System.Nullable<System.DateTime> datefrom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateTo", DbType="DateTime")] System.Nullable<System.DateTime> dateTo)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), datefrom, dateTo).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CountTicketPrice", IsComposable=true)]
		public System.Nullable<int> CountTicketPrice([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShowID", DbType="Int")] System.Nullable<int> showID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Row", DbType="Int")] System.Nullable<int> row, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Seat", DbType="Int")] System.Nullable<int> seat)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), showID, row, seat).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FreePlaces", IsComposable=true)]
		public System.Nullable<int> FreePlaces([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShowID", DbType="Int")] System.Nullable<int> showID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), showID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HasShows", IsComposable=true)]
		public System.Nullable<int> HasShows([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MovieID", DbType="Int")] System.Nullable<int> movieID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), movieID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.IsShowCorrect", IsComposable=true)]
		public System.Nullable<int> IsShowCorrect([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewRoomID", DbType="Int")] System.Nullable<int> newRoomID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewMovieID", DbType="Int")] System.Nullable<int> newMovieID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewDate", DbType="DateTime")] System.Nullable<System.DateTime> newDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewSession", DbType="DateTime")] System.Nullable<System.DateTime> newSession)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), newRoomID, newMovieID, newDate, newSession).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.IsVipF", IsComposable=true)]
		public System.Nullable<bool> IsVipF([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShowID", DbType="Int")] System.Nullable<int> showID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Row", DbType="Int")] System.Nullable<int> row, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Seat", DbType="Int")] System.Nullable<int> seat)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), showID, row, seat).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CountPrice")]
		public int CountPrice([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShowID", DbType="Int")] System.Nullable<int> showID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), showID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ConcatCountries", IsComposable=true)]
		public string ConcatCountries([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MovieID", DbType="Int")] System.Nullable<int> movieID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), movieID).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCountry")]
	public partial class tblCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryName;
		
		private EntitySet<tblMovieCountry> _tblMovieCountries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public tblCountry()
		{
			this._tblMovieCountries = new EntitySet<tblMovieCountry>(new Action<tblMovieCountry>(this.attach_tblMovieCountries), new Action<tblMovieCountry>(this.detach_tblMovieCountries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblMovieCountry", Storage="_tblMovieCountries", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<tblMovieCountry> tblMovieCountries
		{
			get
			{
				return this._tblMovieCountries;
			}
			set
			{
				this._tblMovieCountries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblMovieCountries(tblMovieCountry entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = this;
		}
		
		private void detach_tblMovieCountries(tblMovieCountry entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Rights;
		
		private EntitySet<tblSoldTicket> _tblSoldTickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRightsChanging(string value);
    partial void OnRightsChanged();
    #endregion
		
		public tblUser()
		{
			this._tblSoldTickets = new EntitySet<tblSoldTicket>(new Action<tblSoldTicket>(this.attach_tblSoldTickets), new Action<tblSoldTicket>(this.detach_tblSoldTickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rights", DbType="VarChar(2)")]
		public string Rights
		{
			get
			{
				return this._Rights;
			}
			set
			{
				if ((this._Rights != value))
				{
					this.OnRightsChanging(value);
					this.SendPropertyChanging();
					this._Rights = value;
					this.SendPropertyChanged("Rights");
					this.OnRightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblSoldTicket", Storage="_tblSoldTickets", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<tblSoldTicket> tblSoldTickets
		{
			get
			{
				return this._tblSoldTickets;
			}
			set
			{
				this._tblSoldTickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblSoldTickets(tblSoldTicket entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblSoldTickets(tblSoldTicket entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblGenre")]
	public partial class tblGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreID;
		
		private string _GenreName;
		
		private EntitySet<tblMovieGenre> _tblMovieGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnGenreNameChanging(string value);
    partial void OnGenreNameChanged();
    #endregion
		
		public tblGenre()
		{
			this._tblMovieGenres = new EntitySet<tblMovieGenre>(new Action<tblMovieGenre>(this.attach_tblMovieGenres), new Action<tblMovieGenre>(this.detach_tblMovieGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GenreName
		{
			get
			{
				return this._GenreName;
			}
			set
			{
				if ((this._GenreName != value))
				{
					this.OnGenreNameChanging(value);
					this.SendPropertyChanging();
					this._GenreName = value;
					this.SendPropertyChanged("GenreName");
					this.OnGenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblGenre_tblMovieGenre", Storage="_tblMovieGenres", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<tblMovieGenre> tblMovieGenres
		{
			get
			{
				return this._tblMovieGenres;
			}
			set
			{
				this._tblMovieGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblMovieGenres(tblMovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.tblGenre = this;
		}
		
		private void detach_tblMovieGenres(tblMovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.tblGenre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblMovie")]
	public partial class tblMovie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _MovieName;
		
		private string _MovieDirector;
		
		private int _MovieDuration;
		
		private System.Nullable<int> _MovieYear;
		
		private System.Nullable<int> _MinAge;
		
		private string _MainActor;
		
		private EntitySet<tblMovieCountry> _tblMovieCountries;
		
		private EntitySet<tblMovieGenre> _tblMovieGenres;
		
		private EntitySet<tblShow> _tblShows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnMovieNameChanging(string value);
    partial void OnMovieNameChanged();
    partial void OnMovieDirectorChanging(string value);
    partial void OnMovieDirectorChanged();
    partial void OnMovieDurationChanging(int value);
    partial void OnMovieDurationChanged();
    partial void OnMovieYearChanging(System.Nullable<int> value);
    partial void OnMovieYearChanged();
    partial void OnMinAgeChanging(System.Nullable<int> value);
    partial void OnMinAgeChanged();
    partial void OnMainActorChanging(string value);
    partial void OnMainActorChanged();
    #endregion
		
		public tblMovie()
		{
			this._tblMovieCountries = new EntitySet<tblMovieCountry>(new Action<tblMovieCountry>(this.attach_tblMovieCountries), new Action<tblMovieCountry>(this.detach_tblMovieCountries));
			this._tblMovieGenres = new EntitySet<tblMovieGenre>(new Action<tblMovieGenre>(this.attach_tblMovieGenres), new Action<tblMovieGenre>(this.detach_tblMovieGenres));
			this._tblShows = new EntitySet<tblShow>(new Action<tblShow>(this.attach_tblShows), new Action<tblShow>(this.detach_tblShows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MovieName
		{
			get
			{
				return this._MovieName;
			}
			set
			{
				if ((this._MovieName != value))
				{
					this.OnMovieNameChanging(value);
					this.SendPropertyChanging();
					this._MovieName = value;
					this.SendPropertyChanged("MovieName");
					this.OnMovieNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieDirector", DbType="VarChar(60)")]
		public string MovieDirector
		{
			get
			{
				return this._MovieDirector;
			}
			set
			{
				if ((this._MovieDirector != value))
				{
					this.OnMovieDirectorChanging(value);
					this.SendPropertyChanging();
					this._MovieDirector = value;
					this.SendPropertyChanged("MovieDirector");
					this.OnMovieDirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieDuration", DbType="Int NOT NULL")]
		public int MovieDuration
		{
			get
			{
				return this._MovieDuration;
			}
			set
			{
				if ((this._MovieDuration != value))
				{
					this.OnMovieDurationChanging(value);
					this.SendPropertyChanging();
					this._MovieDuration = value;
					this.SendPropertyChanged("MovieDuration");
					this.OnMovieDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieYear", DbType="Int")]
		public System.Nullable<int> MovieYear
		{
			get
			{
				return this._MovieYear;
			}
			set
			{
				if ((this._MovieYear != value))
				{
					this.OnMovieYearChanging(value);
					this.SendPropertyChanging();
					this._MovieYear = value;
					this.SendPropertyChanged("MovieYear");
					this.OnMovieYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinAge", DbType="Int")]
		public System.Nullable<int> MinAge
		{
			get
			{
				return this._MinAge;
			}
			set
			{
				if ((this._MinAge != value))
				{
					this.OnMinAgeChanging(value);
					this.SendPropertyChanging();
					this._MinAge = value;
					this.SendPropertyChanged("MinAge");
					this.OnMinAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainActor", DbType="VarChar(100)")]
		public string MainActor
		{
			get
			{
				return this._MainActor;
			}
			set
			{
				if ((this._MainActor != value))
				{
					this.OnMainActorChanging(value);
					this.SendPropertyChanging();
					this._MainActor = value;
					this.SendPropertyChanged("MainActor");
					this.OnMainActorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblMovie_tblMovieCountry", Storage="_tblMovieCountries", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<tblMovieCountry> tblMovieCountries
		{
			get
			{
				return this._tblMovieCountries;
			}
			set
			{
				this._tblMovieCountries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblMovie_tblMovieGenre", Storage="_tblMovieGenres", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<tblMovieGenre> tblMovieGenres
		{
			get
			{
				return this._tblMovieGenres;
			}
			set
			{
				this._tblMovieGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblMovie_tblShow", Storage="_tblShows", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<tblShow> tblShows
		{
			get
			{
				return this._tblShows;
			}
			set
			{
				this._tblShows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblMovieCountries(tblMovieCountry entity)
		{
			this.SendPropertyChanging();
			entity.tblMovie = this;
		}
		
		private void detach_tblMovieCountries(tblMovieCountry entity)
		{
			this.SendPropertyChanging();
			entity.tblMovie = null;
		}
		
		private void attach_tblMovieGenres(tblMovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.tblMovie = this;
		}
		
		private void detach_tblMovieGenres(tblMovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.tblMovie = null;
		}
		
		private void attach_tblShows(tblShow entity)
		{
			this.SendPropertyChanging();
			entity.tblMovie = this;
		}
		
		private void detach_tblShows(tblShow entity)
		{
			this.SendPropertyChanging();
			entity.tblMovie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblMovieCountry")]
	public partial class tblMovieCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private int _CountryID;
		
		private EntityRef<tblCountry> _tblCountry;
		
		private EntityRef<tblMovie> _tblMovie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    #endregion
		
		public tblMovieCountry()
		{
			this._tblCountry = default(EntityRef<tblCountry>);
			this._tblMovie = default(EntityRef<tblMovie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._tblMovie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._tblCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblMovieCountry", Storage="_tblCountry", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblCountry tblCountry
		{
			get
			{
				return this._tblCountry.Entity;
			}
			set
			{
				tblCountry previousValue = this._tblCountry.Entity;
				if (((previousValue != value) 
							|| (this._tblCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCountry.Entity = null;
						previousValue.tblMovieCountries.Remove(this);
					}
					this._tblCountry.Entity = value;
					if ((value != null))
					{
						value.tblMovieCountries.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("tblCountry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblMovie_tblMovieCountry", Storage="_tblMovie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblMovie tblMovie
		{
			get
			{
				return this._tblMovie.Entity;
			}
			set
			{
				tblMovie previousValue = this._tblMovie.Entity;
				if (((previousValue != value) 
							|| (this._tblMovie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblMovie.Entity = null;
						previousValue.tblMovieCountries.Remove(this);
					}
					this._tblMovie.Entity = value;
					if ((value != null))
					{
						value.tblMovieCountries.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("tblMovie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblMovieGenre")]
	public partial class tblMovieGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private int _GenreID;
		
		private EntityRef<tblGenre> _tblGenre;
		
		private EntityRef<tblMovie> _tblMovie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    #endregion
		
		public tblMovieGenre()
		{
			this._tblGenre = default(EntityRef<tblGenre>);
			this._tblMovie = default(EntityRef<tblMovie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._tblMovie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._tblGenre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblGenre_tblMovieGenre", Storage="_tblGenre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblGenre tblGenre
		{
			get
			{
				return this._tblGenre.Entity;
			}
			set
			{
				tblGenre previousValue = this._tblGenre.Entity;
				if (((previousValue != value) 
							|| (this._tblGenre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblGenre.Entity = null;
						previousValue.tblMovieGenres.Remove(this);
					}
					this._tblGenre.Entity = value;
					if ((value != null))
					{
						value.tblMovieGenres.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(int);
					}
					this.SendPropertyChanged("tblGenre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblMovie_tblMovieGenre", Storage="_tblMovie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblMovie tblMovie
		{
			get
			{
				return this._tblMovie.Entity;
			}
			set
			{
				tblMovie previousValue = this._tblMovie.Entity;
				if (((previousValue != value) 
							|| (this._tblMovie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblMovie.Entity = null;
						previousValue.tblMovieGenres.Remove(this);
					}
					this._tblMovie.Entity = value;
					if ((value != null))
					{
						value.tblMovieGenres.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("tblMovie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPrices")]
	public partial class tblPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WeekDay;
		
		private System.DateTime _SessionStart;
		
		private System.DateTime _Sessionend;
		
		private int _NotVipPrice;
		
		private int _VipPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeekDayChanging(int value);
    partial void OnWeekDayChanged();
    partial void OnSessionStartChanging(System.DateTime value);
    partial void OnSessionStartChanged();
    partial void OnSessionendChanging(System.DateTime value);
    partial void OnSessionendChanged();
    partial void OnNotVipPriceChanging(int value);
    partial void OnNotVipPriceChanged();
    partial void OnVipPriceChanging(int value);
    partial void OnVipPriceChanged();
    #endregion
		
		public tblPrice()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDay", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WeekDay
		{
			get
			{
				return this._WeekDay;
			}
			set
			{
				if ((this._WeekDay != value))
				{
					this.OnWeekDayChanging(value);
					this.SendPropertyChanging();
					this._WeekDay = value;
					this.SendPropertyChanged("WeekDay");
					this.OnWeekDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionStart", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime SessionStart
		{
			get
			{
				return this._SessionStart;
			}
			set
			{
				if ((this._SessionStart != value))
				{
					this.OnSessionStartChanging(value);
					this.SendPropertyChanging();
					this._SessionStart = value;
					this.SendPropertyChanged("SessionStart");
					this.OnSessionStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sessionend", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Sessionend
		{
			get
			{
				return this._Sessionend;
			}
			set
			{
				if ((this._Sessionend != value))
				{
					this.OnSessionendChanging(value);
					this.SendPropertyChanging();
					this._Sessionend = value;
					this.SendPropertyChanged("Sessionend");
					this.OnSessionendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotVipPrice", DbType="Int NOT NULL")]
		public int NotVipPrice
		{
			get
			{
				return this._NotVipPrice;
			}
			set
			{
				if ((this._NotVipPrice != value))
				{
					this.OnNotVipPriceChanging(value);
					this.SendPropertyChanging();
					this._NotVipPrice = value;
					this.SendPropertyChanged("NotVipPrice");
					this.OnNotVipPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VipPrice", DbType="Int NOT NULL")]
		public int VipPrice
		{
			get
			{
				return this._VipPrice;
			}
			set
			{
				if ((this._VipPrice != value))
				{
					this.OnVipPriceChanging(value);
					this.SendPropertyChanging();
					this._VipPrice = value;
					this.SendPropertyChanged("VipPrice");
					this.OnVipPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblRoom")]
	public partial class tblRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private int _RowNumber;
		
		private int _SeatsNumber;
		
		private int _NumOfSeats;
		
		private EntitySet<tblSeat> _tblSeats;
		
		private EntitySet<tblShow> _tblShows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnRowNumberChanging(int value);
    partial void OnRowNumberChanged();
    partial void OnSeatsNumberChanging(int value);
    partial void OnSeatsNumberChanged();
    partial void OnNumOfSeatsChanging(int value);
    partial void OnNumOfSeatsChanged();
    #endregion
		
		public tblRoom()
		{
			this._tblSeats = new EntitySet<tblSeat>(new Action<tblSeat>(this.attach_tblSeats), new Action<tblSeat>(this.detach_tblSeats));
			this._tblShows = new EntitySet<tblShow>(new Action<tblShow>(this.attach_tblShows), new Action<tblShow>(this.detach_tblShows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowNumber", DbType="Int NOT NULL")]
		public int RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this.OnRowNumberChanging(value);
					this.SendPropertyChanging();
					this._RowNumber = value;
					this.SendPropertyChanged("RowNumber");
					this.OnRowNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatsNumber", DbType="Int NOT NULL")]
		public int SeatsNumber
		{
			get
			{
				return this._SeatsNumber;
			}
			set
			{
				if ((this._SeatsNumber != value))
				{
					this.OnSeatsNumberChanging(value);
					this.SendPropertyChanging();
					this._SeatsNumber = value;
					this.SendPropertyChanged("SeatsNumber");
					this.OnSeatsNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfSeats", DbType="Int NOT NULL")]
		public int NumOfSeats
		{
			get
			{
				return this._NumOfSeats;
			}
			set
			{
				if ((this._NumOfSeats != value))
				{
					this.OnNumOfSeatsChanging(value);
					this.SendPropertyChanging();
					this._NumOfSeats = value;
					this.SendPropertyChanged("NumOfSeats");
					this.OnNumOfSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRoom_tblSeat", Storage="_tblSeats", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<tblSeat> tblSeats
		{
			get
			{
				return this._tblSeats;
			}
			set
			{
				this._tblSeats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRoom_tblShow", Storage="_tblShows", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<tblShow> tblShows
		{
			get
			{
				return this._tblShows;
			}
			set
			{
				this._tblShows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblSeats(tblSeat entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = this;
		}
		
		private void detach_tblSeats(tblSeat entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = null;
		}
		
		private void attach_tblShows(tblShow entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = this;
		}
		
		private void detach_tblShows(tblShow entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSeat")]
	public partial class tblSeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private int _Row;
		
		private int _Seat;
		
		private int _Vip;
		
		private EntityRef<tblRoom> _tblRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnRowChanging(int value);
    partial void OnRowChanged();
    partial void OnSeatChanging(int value);
    partial void OnSeatChanged();
    partial void OnVipChanging(int value);
    partial void OnVipChanged();
    #endregion
		
		public tblSeat()
		{
			this._tblRoom = default(EntityRef<tblRoom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._tblRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Row
		{
			get
			{
				return this._Row;
			}
			set
			{
				if ((this._Row != value))
				{
					this.OnRowChanging(value);
					this.SendPropertyChanging();
					this._Row = value;
					this.SendPropertyChanged("Row");
					this.OnRowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Seat
		{
			get
			{
				return this._Seat;
			}
			set
			{
				if ((this._Seat != value))
				{
					this.OnSeatChanging(value);
					this.SendPropertyChanging();
					this._Seat = value;
					this.SendPropertyChanged("Seat");
					this.OnSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vip", DbType="Int NOT NULL")]
		public int Vip
		{
			get
			{
				return this._Vip;
			}
			set
			{
				if ((this._Vip != value))
				{
					this.OnVipChanging(value);
					this.SendPropertyChanging();
					this._Vip = value;
					this.SendPropertyChanged("Vip");
					this.OnVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRoom_tblSeat", Storage="_tblRoom", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblRoom tblRoom
		{
			get
			{
				return this._tblRoom.Entity;
			}
			set
			{
				tblRoom previousValue = this._tblRoom.Entity;
				if (((previousValue != value) 
							|| (this._tblRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRoom.Entity = null;
						previousValue.tblSeats.Remove(this);
					}
					this._tblRoom.Entity = value;
					if ((value != null))
					{
						value.tblSeats.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("tblRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSoldTicket")]
	public partial class tblSoldTicket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoldTicketID;
		
		private int _UserID;
		
		private int _TicketID;
		
		private EntityRef<tblUser> _tblUser;
		
		private EntityRef<tblTicket> _tblTicket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoldTicketIDChanging(int value);
    partial void OnSoldTicketIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    #endregion
		
		public tblSoldTicket()
		{
			this._tblUser = default(EntityRef<tblUser>);
			this._tblTicket = default(EntityRef<tblTicket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldTicketID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SoldTicketID
		{
			get
			{
				return this._SoldTicketID;
			}
			set
			{
				if ((this._SoldTicketID != value))
				{
					this.OnSoldTicketIDChanging(value);
					this.SendPropertyChanging();
					this._SoldTicketID = value;
					this.SendPropertyChanged("SoldTicketID");
					this.OnSoldTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", DbType="Int NOT NULL")]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					if (this._tblTicket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblSoldTicket", Storage="_tblUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblSoldTickets.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblSoldTickets.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTicket_tblSoldTicket", Storage="_tblTicket", ThisKey="TicketID", OtherKey="TicketID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblTicket tblTicket
		{
			get
			{
				return this._tblTicket.Entity;
			}
			set
			{
				tblTicket previousValue = this._tblTicket.Entity;
				if (((previousValue != value) 
							|| (this._tblTicket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTicket.Entity = null;
						previousValue.tblSoldTickets.Remove(this);
					}
					this._tblTicket.Entity = value;
					if ((value != null))
					{
						value.tblSoldTickets.Add(this);
						this._TicketID = value.TicketID;
					}
					else
					{
						this._TicketID = default(int);
					}
					this.SendPropertyChanged("tblTicket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblTicket")]
	public partial class tblTicket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private System.Nullable<int> _ShowID;
		
		private System.Nullable<int> _Row;
		
		private System.Nullable<int> _Seat;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<tblSoldTicket> _tblSoldTickets;
		
		private EntityRef<tblShow> _tblShow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnShowIDChanging(System.Nullable<int> value);
    partial void OnShowIDChanged();
    partial void OnRowChanging(System.Nullable<int> value);
    partial void OnRowChanged();
    partial void OnSeatChanging(System.Nullable<int> value);
    partial void OnSeatChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public tblTicket()
		{
			this._tblSoldTickets = new EntitySet<tblSoldTicket>(new Action<tblSoldTicket>(this.attach_tblSoldTickets), new Action<tblSoldTicket>(this.detach_tblSoldTickets));
			this._tblShow = default(EntityRef<tblShow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowID", DbType="Int")]
		public System.Nullable<int> ShowID
		{
			get
			{
				return this._ShowID;
			}
			set
			{
				if ((this._ShowID != value))
				{
					if (this._tblShow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIDChanging(value);
					this.SendPropertyChanging();
					this._ShowID = value;
					this.SendPropertyChanged("ShowID");
					this.OnShowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row", DbType="Int")]
		public System.Nullable<int> Row
		{
			get
			{
				return this._Row;
			}
			set
			{
				if ((this._Row != value))
				{
					this.OnRowChanging(value);
					this.SendPropertyChanging();
					this._Row = value;
					this.SendPropertyChanged("Row");
					this.OnRowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat", DbType="Int")]
		public System.Nullable<int> Seat
		{
			get
			{
				return this._Seat;
			}
			set
			{
				if ((this._Seat != value))
				{
					this.OnSeatChanging(value);
					this.SendPropertyChanging();
					this._Seat = value;
					this.SendPropertyChanged("Seat");
					this.OnSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTicket_tblSoldTicket", Storage="_tblSoldTickets", ThisKey="TicketID", OtherKey="TicketID")]
		public EntitySet<tblSoldTicket> tblSoldTickets
		{
			get
			{
				return this._tblSoldTickets;
			}
			set
			{
				this._tblSoldTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblShow_tblTicket", Storage="_tblShow", ThisKey="ShowID", OtherKey="ShowID", IsForeignKey=true, DeleteRule="CASCADE")]
		public tblShow tblShow
		{
			get
			{
				return this._tblShow.Entity;
			}
			set
			{
				tblShow previousValue = this._tblShow.Entity;
				if (((previousValue != value) 
							|| (this._tblShow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblShow.Entity = null;
						previousValue.tblTickets.Remove(this);
					}
					this._tblShow.Entity = value;
					if ((value != null))
					{
						value.tblTickets.Add(this);
						this._ShowID = value.ShowID;
					}
					else
					{
						this._ShowID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblShow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblSoldTickets(tblSoldTicket entity)
		{
			this.SendPropertyChanging();
			entity.tblTicket = this;
		}
		
		private void detach_tblSoldTickets(tblSoldTicket entity)
		{
			this.SendPropertyChanging();
			entity.tblTicket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShowFilmsAfterCurrentTime")]
	public partial class ShowFilmsAfterCurrentTime
	{
		
		private string _Name;
		
		private int _MovieID;
		
		private System.Nullable<int> _showid;
		
		public ShowFilmsAfterCurrentTime()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this._MovieID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showid", DbType="Int")]
		public System.Nullable<int> showid
		{
			get
			{
				return this._showid;
			}
			set
			{
				if ((this._showid != value))
				{
					this._showid = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblShow")]
	public partial class tblShow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShowID;
		
		private int _MovieID;
		
		private int _RoomID;
		
		private System.DateTime _Date;
		
		private System.DateTime _Session;
		
		private int _NotVipPrice;
		
		private int _VipPrice;
		
		private int _NumOfSoldTickets;
		
		private EntitySet<tblTicket> _tblTickets;
		
		private EntityRef<tblMovie> _tblMovie;
		
		private EntityRef<tblRoom> _tblRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShowIDChanging(int value);
    partial void OnShowIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSessionChanging(System.DateTime value);
    partial void OnSessionChanged();
    partial void OnNotVipPriceChanging(int value);
    partial void OnNotVipPriceChanged();
    partial void OnVipPriceChanging(int value);
    partial void OnVipPriceChanged();
    partial void OnNumOfSoldTicketsChanging(int value);
    partial void OnNumOfSoldTicketsChanged();
    #endregion
		
		public tblShow()
		{
			this._tblTickets = new EntitySet<tblTicket>(new Action<tblTicket>(this.attach_tblTickets), new Action<tblTicket>(this.detach_tblTickets));
			this._tblMovie = default(EntityRef<tblMovie>);
			this._tblRoom = default(EntityRef<tblRoom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShowID
		{
			get
			{
				return this._ShowID;
			}
			set
			{
				if ((this._ShowID != value))
				{
					this.OnShowIDChanging(value);
					this.SendPropertyChanging();
					this._ShowID = value;
					this.SendPropertyChanged("ShowID");
					this.OnShowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._tblMovie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._tblRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Session", DbType="DateTime NOT NULL")]
		public System.DateTime Session
		{
			get
			{
				return this._Session;
			}
			set
			{
				if ((this._Session != value))
				{
					this.OnSessionChanging(value);
					this.SendPropertyChanging();
					this._Session = value;
					this.SendPropertyChanged("Session");
					this.OnSessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotVipPrice", DbType="Int NOT NULL")]
		public int NotVipPrice
		{
			get
			{
				return this._NotVipPrice;
			}
			set
			{
				if ((this._NotVipPrice != value))
				{
					this.OnNotVipPriceChanging(value);
					this.SendPropertyChanging();
					this._NotVipPrice = value;
					this.SendPropertyChanged("NotVipPrice");
					this.OnNotVipPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VipPrice", DbType="Int NOT NULL")]
		public int VipPrice
		{
			get
			{
				return this._VipPrice;
			}
			set
			{
				if ((this._VipPrice != value))
				{
					this.OnVipPriceChanging(value);
					this.SendPropertyChanging();
					this._VipPrice = value;
					this.SendPropertyChanged("VipPrice");
					this.OnVipPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfSoldTickets", DbType="Int NOT NULL")]
		public int NumOfSoldTickets
		{
			get
			{
				return this._NumOfSoldTickets;
			}
			set
			{
				if ((this._NumOfSoldTickets != value))
				{
					this.OnNumOfSoldTicketsChanging(value);
					this.SendPropertyChanging();
					this._NumOfSoldTickets = value;
					this.SendPropertyChanged("NumOfSoldTickets");
					this.OnNumOfSoldTicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblShow_tblTicket", Storage="_tblTickets", ThisKey="ShowID", OtherKey="ShowID")]
		public EntitySet<tblTicket> tblTickets
		{
			get
			{
				return this._tblTickets;
			}
			set
			{
				this._tblTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblMovie_tblShow", Storage="_tblMovie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblMovie tblMovie
		{
			get
			{
				return this._tblMovie.Entity;
			}
			set
			{
				tblMovie previousValue = this._tblMovie.Entity;
				if (((previousValue != value) 
							|| (this._tblMovie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblMovie.Entity = null;
						previousValue.tblShows.Remove(this);
					}
					this._tblMovie.Entity = value;
					if ((value != null))
					{
						value.tblShows.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("tblMovie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRoom_tblShow", Storage="_tblRoom", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblRoom tblRoom
		{
			get
			{
				return this._tblRoom.Entity;
			}
			set
			{
				tblRoom previousValue = this._tblRoom.Entity;
				if (((previousValue != value) 
							|| (this._tblRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRoom.Entity = null;
						previousValue.tblShows.Remove(this);
					}
					this._tblRoom.Entity = value;
					if ((value != null))
					{
						value.tblShows.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("tblRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblTickets(tblTicket entity)
		{
			this.SendPropertyChanging();
			entity.tblShow = this;
		}
		
		private void detach_tblTickets(tblTicket entity)
		{
			this.SendPropertyChanging();
			entity.tblShow = null;
		}
	}
}
#pragma warning restore 1591
